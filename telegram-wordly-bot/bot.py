import os
import logging
import random
import pymorphy2
import json
from datetime import datetime
from pathlib import Path
from zoneinfo import ZoneInfo  # Python 3.9+
from telegram import InputFile

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from wordfreq import iter_wordlist, zipf_frequency
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_FILE = Path("user_activity.json")

def load_user_activity() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç user_activity.json.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    if not USER_FILE.exists():
        return {}
    text = USER_FILE.read_text(encoding="utf-8").strip()
    if not text:
        return {}
    try:
        return json.loads(text)
    except json.JSONDecodeError:
        # –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
        logger.warning(f"{USER_FILE} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
        return {}

def save_user_activity(data: dict) -> None:
    USER_FILE.write_text(
        json.dumps(data, ensure_ascii=False, indent=2),
        encoding="utf-8"
    )

def update_user_activity(user) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ telegram.User.to_dict()
    –ø–ª—é—Å timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.
    """
    data = load_user_activity()
    uid = str(user.id)
    entry = user.to_dict()  # –≤–∫–ª—é—á–∞–µ—Ç id, is_bot, first_name, last_name, username, language_code, is_premium –∏ –¥—Ä.
    entry["last_seen_msk"] = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()
    data[uid] = entry
    save_user_activity(data)


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–ª–æ–≤–∞—Ä—å ---
ASK_LENGTH, GUESSING = range(2)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä—Ñ–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
morph = pymorphy2.MorphAnalyzer(lang="ru")

# —á–∞—Å—Ç–æ—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ (—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –ø–æ –≤–∫—É—Å—É)
ZIPF_THRESHOLD = 2.5

BLACK_LIST = {"–ø–æ—É–ø", "—Ñ–µ–¥—è"}

WORDLIST = sorted({
    w
    for w in iter_wordlist("ru", wordlist="large")
    if (
        w.isalpha()
        and 4 <= len(w) <= 11
        and w not in BLACK_LIST
	and zipf_frequency(w, "ru") >= ZIPF_THRESHOLD  # –≤–æ—Ç –æ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    )
    # –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ-–ª–µ–º–º—ã, –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É pymorphy2:
    for p in [morph.parse(w)[0]]
    if p.tag.POS == "NOUN" and p.normal_form == w
})

GREEN, YELLOW, RED, UNK = "üü©", "üü®", "üü•", "‚¨ú"


def make_feedback(secret: str, guess: str) -> str:
    fb = [None] * len(guess)
    secret_chars = list(secret)
    # 1) –∑–µ–ª—ë–Ω—ã–µ
    for i, ch in enumerate(guess):
        if secret[i] == ch:
            fb[i] = GREEN
            secret_chars[i] = None
    # 2) –∂—ë–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
    for i, ch in enumerate(guess):
        if fb[i] is None:
            if ch in secret_chars:
                fb[i] = YELLOW
                secret_chars[secret_chars.index(ch)] = None
            else:
                fb[i] = RED
    return "".join(fb)


def compute_letter_status(secret: str, guesses: list[str]) -> dict[str, str]:
    status: dict[str, str] = {}
    for guess in guesses:
        # –∑–µ–ª—ë–Ω—ã–µ
        for i, ch in enumerate(guess):
            if secret[i] == ch:
                status[ch] = "green"
        # –∫–æ–ø–∏—è –¥–ª—è –∂—ë–ª—Ç—ã—Ö
        secret_chars = list(secret)
        for i, ch in enumerate(guess):
            if status.get(ch) == "green":
                secret_chars[i] = None
        # –∂—ë–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
        for i, ch in enumerate(guess):
            if status.get(ch) == "green":
                continue
            if ch in secret_chars:
                if status.get(ch) != "green":
                    status[ch] = "yellow"
                secret_chars[secret_chars.index(ch)] = None
            else:
                if status.get(ch) not in ("green", "yellow"):
                    status[ch] = "red"
    return status


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Wordly Bot ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫.\n\n"
        "/play ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/my_letters ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±—É–∫–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n\n"
        "–¢–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—ã–≤–∞–π: —è –µ—â—ë —É—á—É—Å—å –∏ –Ω–µ –∑–Ω–∞—é –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤!\n"
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –µ—Å–ª–∏ —è —Ä—É–≥–∞—é—Å—å –Ω–∞ —Ç–≤–æ—ë —Å–ª–æ–≤–æ ‚Äî –º–Ω–µ –µ—Å—Ç—å —á–µ–º—É —É—á–∏—Ç—å—Å—è :)\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –∏–Ω–æ–≥–¥–∞ —è –º–æ–≥—É ¬´–≤—ã–∫–ª—é—á–∞—Ç—å—Å—è¬ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∂–∏–≤—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.\n"
        "–ï—Å–ª–∏ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏ –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —è –∑–∞–±—ã–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ç–∞–∫ —á—Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—Ö_—Ö)."
    )

async def send_activity_periodic(context: ContextTypes.DEFAULT_TYPE):
     """
     –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞) —à–ª—ë–º —é–∑–µ—Ä-–∞–∫—Ç–∏–≤–∏—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
     """
     ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –≤–∞—à ID
     if update.effective_user.id != ADMIN_ID:
         return
     activity_path = Path("user_activity.json")
     if not activity_path.exists():
         return
     # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
     with activity_path.open("rb") as f:
         await context.bot.send_document(
             chat_id=ADMIN_ID,
             document=InputFile(f, filename="user_activity.json"),
             caption="–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª user_activity.json"
         )

async def ask_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ? (4‚Äì11)")
    return ASK_LENGTH

async def receive_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    text = update.message.text.strip()
    if not text.isdigit() or not 4 <= int(text) <= 11:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 11.")
        return ASK_LENGTH

    length = int(text)
    candidates = [w for w in WORDLIST if len(w) == length]
    if not candidates:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Å–ª–æ–≤ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:")
        return ASK_LENGTH

    secret = random.choice(candidates)
    context.user_data["secret"] = secret
    context.user_data["length"] = length
    context.user_data["attempts"] = 0
    context.user_data["guesses"] = []

    await update.message.reply_text(
        f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤. –£ —Ç–µ–±—è 6 –ø–æ–ø—ã—Ç–æ–∫. –í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –¥–æ–≥–∞–¥–∫—É:"
    )
    return GUESSING

async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    guess = update.message.text.strip().lower()
    secret = context.user_data["secret"]
    length = context.user_data["length"]

    if len(guess) != length or guess not in WORDLIST:
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤.")
        return GUESSING

    context.user_data["guesses"].append(guess)
    context.user_data["attempts"] += 1
    attempts = context.user_data["attempts"]

    fb = make_feedback(secret, guess)
    await update.message.reply_text(fb)

    # –ø–æ–±–µ–¥–∞
    if guess == secret:
        context.user_data.clear()
        # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ
        form = "–ø–æ–ø—ã—Ç–∫–∞" if attempts % 10 == 1 and attempts % 100 != 11 else (
               "–ø–æ–ø—ã—Ç–∫–∏" if 2 <= attempts % 10 <= 4 and not 12 <= attempts % 100 <= 14
               else "–ø–æ–ø—ã—Ç–æ–∫")
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£–≥–∞–¥–∞–ª –∑–∞ {attempts} {form}.\n"
            "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤–Ω–æ–≤—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /play."
        )
        return ConversationHandler.END

    # –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
    if attempts >= 6:
        context.user_data.clear()
        await update.message.reply_text(
            f"üíî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ —Å–ª–æ–≤–æ ¬´{secret}¬ª.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /play."
        )
        return ConversationHandler.END

    return GUESSING

async def my_letters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    data = context.user_data
    if "secret" not in data:
        await update.message.reply_text("–°–µ–π—á–∞—Å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ ‚Äî –Ω–∞—á–Ω–∏ –∏–≥—Ä—É: /play")
        return
    guesses = data.get("guesses", [])
    alphabet = list("–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è")

    if not guesses:
        await update.message.reply_text(UNK + " " + " ".join(alphabet))
        return

    status = compute_letter_status(data["secret"], guesses)
    greens  = [ch for ch in alphabet if status.get(ch) == "green"]
    yellows = [ch for ch in alphabet if status.get(ch) == "yellow"]
    reds    = [ch for ch in alphabet if status.get(ch) == "red"]
    unused  = [ch for ch in alphabet if ch not in status]

    lines = []
    if greens:  lines.append(GREEN  + " " + " ".join(greens))
    if yellows: lines.append(YELLOW + " " + " ".join(yellows))
    if reds:    lines.append(RED    + " " + " ".join(reds))
    if unused:  lines.append(UNK    + " " + " ".join(unused))

    await update.message.reply_text("\n".join(lines))

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ñ–¥—É /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
    return ConversationHandler.END

async def reset_global(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É: /play")

IGN_MSG = "–ö–æ–º–∞–Ω–¥—ã /start –∏ /play –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ /reset."

async def ignore_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return ASK_LENGTH

async def ignore_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return GUESSING


def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    app = ApplicationBuilder().token(token).build()
	
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É: –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ —à–ª—ë–º user_activity.json –∞–¥–º–∏–Ω—É
    job_queue = app.job_queue
    job_queue.run_repeating(
        send_activity_periodic,
        interval=3 * 60 * 60,  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        first=3 * 60 * 60      # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
    )
	
    conv = ConversationHandler(
        entry_points=[CommandHandler("play", ask_length)],
        states={
            ASK_LENGTH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_length),
                CommandHandler("start", ignore_ask),
                CommandHandler("play", ignore_ask),
                CommandHandler("reset", reset),
            ],
            GUESSING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess),
                CommandHandler("my_letters", my_letters),
                CommandHandler("start", ignore_guess),
                CommandHandler("play", ignore_guess),
                CommandHandler("reset", reset),
            ],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )
    app.add_handler(conv)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ
    app.add_handler(CommandHandler("my_letters", my_letters))
    app.add_handler(CommandHandler("reset", reset_global))
    app.add_handler(CommandHandler("start", start))

    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
