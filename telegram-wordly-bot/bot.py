import os
import logging
import random
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from wordfreq import top_n_list
from dotenv import load_dotenv

load_dotenv()  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ASK_LENGTH, GUESSING, PLAY_AGAIN = range(3)
WORDLIST = top_n_list("ru", 50000)
GREEN, YELLOW, RED = "üü©", "üü®", "üü•"

def make_feedback(secret: str, guess: str) -> str:
    feedback = [None] * len(guess)
    secret_chars = list(secret)
    # –∑–µ–ª—ë–Ω—ã–µ
    for i, ch in enumerate(guess):
        if secret[i] == ch:
            feedback[i] = GREEN
            secret_chars[i] = None
    # –∂—ë–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
    for i, ch in enumerate(guess):
        if feedback[i] is None:
            if ch in secret_chars:
                feedback[i] = YELLOW
                secret_chars[secret_chars.index(ch)] = None
            else:
                feedback[i] = RED
    return "".join(feedback)

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Wordly Bot ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫.\n\n"
        "/play ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n\n"
        "–¢–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—ã–≤–∞–π: —è –µ—â—ë —É—á—É—Å—å –∏ –Ω–µ –∑–Ω–∞—é –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤!\n"
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –µ—Å–ª–∏ —è —Ä—É–≥–∞—é—Å—å –Ω–∞ —Ç–≤–æ—ë —Å–ª–æ–≤–æ ‚Äî –º–Ω–µ –µ—Å—Ç—å —á–µ–º—É —É—á–∏—Ç—å—Å—è :)\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –∏–Ω–æ–≥–¥–∞ —è –º–æ–≥—É ¬´–≤—ã–∫–ª—é—á–∞—Ç—å—Å—è¬ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∂–∏–≤—É –≤ –≥—Ä—è–∑–Ω–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –∞ –Ω–µ –≤ —É—é—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ :(\n"
        "–ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é, –≤–µ—Ä–Ω–∏—Å—å —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –∏ –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ—Å–ª–µ —Ç–∞–∫–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ —è —Ç–µ—Ä—è—é –ø–∞–º—è—Ç—å –∏ –∑–∞–±—ã–≤–∞—é, —á—Ç–æ –º—ã –∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—é –ª–µ–Ω—å –¥–µ–ª–∞—Ç—å –ë–î —Å —Å–µ—Å—Å–∏—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤ :(\n"
        "–ü–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–¥—ë—Ç—Å—è —É–≥–∞–¥—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (—Ö_—Ö)."
    )

async def ask_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ? (4‚Äì11)")
    return ASK_LENGTH

async def receive_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit() or not 4 <= int(text) <= 11:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 11.")
        return ASK_LENGTH

    length = int(text)
    candidates = [w for w in WORDLIST if len(w) == length]
    if not candidates:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Å–ª–æ–≤ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:")
        return ASK_LENGTH

    secret = random.choice(candidates)
    context.user_data.update({
        "secret": secret,
        "length": length,
        "attempts": 0,
    })
    await update.message.reply_text(
        f"–ó–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤. –£ —Ç–µ–±—è 6 –ø–æ–ø—ã—Ç–æ–∫. –í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –¥–æ–≥–∞–¥–∫—É:"
    )
    return GUESSING

async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    guess = update.message.text.strip().lower()
    length = context.user_data["length"]
    if len(guess) != length or guess not in WORDLIST:
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤.")
        return GUESSING

    context.user_data["attempts"] += 1
    attempts = context.user_data["attempts"]
    secret = context.user_data["secret"]

    feedback = make_feedback(secret, guess)
    await update.message.reply_text(feedback)

    if guess == secret:
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£–≥–∞–¥–∞–ª –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫.\n"
            "–°—ã–≥—Ä–∞–µ–º –µ—â—ë? (–¥–∞/–Ω–µ—Ç)"
        )
        return PLAY_AGAIN

    if attempts >= 6:
        await update.message.reply_text(
            f"üíî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ —Å–ª–æ–≤–æ ¬´{secret}¬ª.\n"
            "–°—ã–≥—Ä–∞–µ–º –µ—â—ë? (–¥–∞/–Ω–µ—Ç)"
        )
        return PLAY_AGAIN

    return GUESSING

async def play_again(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip().lower()
    if answer in ("–¥–∞", "yes", "–¥"):
        return await ask_length(update, context)

    await update.message.reply_text("–û–∫–µ–π, –∂–¥—É /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
    return ConversationHandler.END

# ==== –ù–æ–≤—ã–π: —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ====

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ñ–¥—É /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
    return ConversationHandler.END

# ==== –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ /start –∏ /play –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ====

IGN_MSG = (
    "–ö–æ–º–∞–Ω–¥—ã /start –∏ /play –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã. "
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /reset."
)

async def ignore_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return ASK_LENGTH

async def ignore_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return GUESSING

async def ignore_playagain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return PLAY_AGAIN

# ==== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ====

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return

    app = ApplicationBuilder().token(token).build()

    # ConversationHandler —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    conv = ConversationHandler(
        entry_points=[CommandHandler("play", ask_length)],
        states={
            ASK_LENGTH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_length),
                CommandHandler("start", ignore_ask),
                CommandHandler("play", ignore_ask),
                CommandHandler("reset", reset),
            ],
            GUESSING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess),
                CommandHandler("start", ignore_guess),
                CommandHandler("play", ignore_guess),
                CommandHandler("reset", reset),
            ],
            PLAY_AGAIN: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, play_again),
                CommandHandler("start", ignore_playagain),
                CommandHandler("play", ignore_playagain),
                CommandHandler("reset", reset),
            ],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("reset", reset),
        ],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))  # –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–µ –≤ –∏–≥—Ä–µ
    app.add_handler(conv)

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
