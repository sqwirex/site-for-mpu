import os
import logging
import random
import json

from datetime import datetime
from pathlib import Path
from zoneinfo import ZoneInfo  # Python 3.9+
from io import BytesIO
from collections import Counter
from PIL import Image, ImageDraw, ImageFont

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    BotCommand,
    BotCommandScopeChat,
    InputFile
)

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_FILE = Path("user_activity.json")
# —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SUGGESTIONS_FILE = Path("suggestions.json")
# –∞–¥–º–∏–Ω –∞–π–¥–∏
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

async def set_commands(app):
    
    await app.bot.set_my_commands(
        [
            BotCommand("start",         "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            BotCommand("play",          "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
            BotCommand("hint",    "–ü–æ–¥—Å–∫–∞–∑–∫–∞"),
            BotCommand("reset",         "–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É"),
            BotCommand("notification",         "–í–∫–ª—é—á–∏—Ç—å/–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand("my_stats",      "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("global_stats",  "–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("feedback", "–ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–ª–æ–≤–æ"),
            BotCommand("dict_file",  "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å"),
            BotCommand("dump_activity", "–°–∫–∞—á–∞—Ç—å user_activity.json"),
            BotCommand("suggestions_view", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–¥–±–µ–∫ —é–∑–µ—Ä–æ–≤"),
            BotCommand("suggestions_remove", "–£–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —Ñ–∏–¥–±–µ–∫–∞"),
            BotCommand("suggestions_approve", "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"),
            BotCommand("broadcast", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —é–∑–µ—Ä–∞–º"),
            BotCommand("broadcast_cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
        ],
        scope=BotCommandScopeChat(chat_id=ADMIN_ID)
    )


def load_suggestions() -> dict[str, set[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'black': set(...), 'white': set(...)} –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    if not SUGGESTIONS_FILE.exists():
        return {"black": set(), "white": set()}
    raw = SUGGESTIONS_FILE.read_text("utf-8").strip()
    if not raw:
        return {"black": set(), "white": set()}
    try:
        data = json.loads(raw)
        return {
            "black": set(data.get("black", [])),
            "white": set(data.get("white", [])),
        }
    except json.JSONDecodeError:
        return {"black": set(), "white": set()}



def save_suggestions(sugg: dict[str, set[str]]):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç suggestions, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏.
    """
    out = {
        "black": sorted(sugg["black"]),
        "white": sorted(sugg["white"]),
    }
    with SUGGESTIONS_FILE.open("w", encoding="utf-8") as f:
        json.dump(out, f, ensure_ascii=False, indent=2)


# –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
suggestions = load_suggestions()

def load_store() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç user_activity.json.
    –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç/–±–∏—Ç—ã–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π —à–∞–±–ª–æ–Ω:
    {
      "users": {},
      "global": { "total_games":0, "total_wins":0, "total_losses":0, "win_rate":0.0 }
    }
    """
    template = {
        "users": {},
        "global": {
            "total_games": 0,
            "total_wins": 0,
            "total_losses": 0,
            "win_rate": 0.0
        }
    }
    if not USER_FILE.exists():
        return template

    raw = USER_FILE.read_text("utf-8").strip()
    if not raw:
        return template

    try:
        data = json.loads(raw)
    except json.JSONDecodeError:
        return template

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    if not isinstance(data, dict):
        return template

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–¥–µ–ª—ã
    if not isinstance(data.get("users"), dict):
        data["users"] = {}
    if not isinstance(data.get("global"), dict):
        data["global"] = template["global"].copy()

    # –ü–æ–¥—Å—Ç–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –≤ global
    for key, val in template["global"].items():
        data["global"].setdefault(key, val)

    return data

def save_store(store: dict) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π store –≤ USER_FILE –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
    –û–∂–∏–¥–∞–µ–º, —á—Ç–æ store –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
    {
      "users": { ... },
      "global": { ... }
    }
    """
    USER_FILE.write_text(
        json.dumps(store, ensure_ascii=False, indent=2),
        encoding="utf-8"
    )

def update_user_activity(user) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å user –≤ store['users'], –¥–æ–±–∞–≤–ª—è—è:
    - first_name, last_name, username
    - is_bot, is_premium, language_code
    - last_seen_msk (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
    - stats (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç): games_played, wins, losses, win rate
    """
    store = load_store()
    uid = str(user.id)
    users = store["users"]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ ‚Äî —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if uid not in users:
        users[uid] = {
            "first_name": user.first_name,
            "stats": {
                "games_played": 0,
                "wins": 0,
                "losses": 0,
                "win_rate": 0.0
            }
        }

    u = users[uid]
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    u["first_name"]    = user.first_name
    u["last_name"]     = user.last_name
    u["username"]      = user.username
    u["is_bot"]        = user.is_bot
    u["is_premium"]    = getattr(user, "is_premium", False)
    u["language_code"] = user.language_code
    u["last_seen_msk"] = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()

    save_store(store)


def normalize(text: str) -> str:
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ —É–±–∏—Ä–∞–µ–º ¬´–µ¬ª
    return text.strip().lower().replace("—ë", "–µ")


def compute_letter_status(secret: str, guesses: list[str]) -> dict[str, str]:
    """
    –î–ª—è –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - "green"  –µ—Å–ª–∏ –±—ã–ª–∞ üü©
      - "yellow" –µ—Å–ª–∏ –±—ã–ª–∞ üü® (–∏ –Ω–µ –±—ã–ª–∞ üü©)
      - "red"    –µ—Å–ª–∏ –±—ã–ª–∞ ‚¨ú (–∏ –Ω–µ –±—ã–ª–∞ –Ω–∏ üü©, –Ω–∏ üü®)
    """
    status: dict[str,str] = {}
    for guess in guesses:
        fb = [] 
        s_chars = list(secret)
        # —Å–Ω–∞—á–∞–ª–∞ –∑–µ–ª–µ–Ω—ã–µ
        for i,ch in enumerate(guess):
            if secret[i] == ch:
                fb.append("üü©")
                s_chars[i] = None
            else:
                fb.append(None)
        # –∑–∞—Ç–µ–º –∂–µ–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
        for i,ch in enumerate(guess):
            if fb[i] is None:
                if ch in s_chars:
                    fb[i] = "üü®"
                    s_chars[s_chars.index(ch)] = None
                else:
                    fb[i] = "‚¨ú"
        # –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        for ch,sym in zip(guess, fb):
            prev = status.get(ch)
            if sym == "üü©":
                status[ch] = "green"
            elif sym == "üü®" and prev != "green":
                status[ch] = "yellow"
            elif sym == "‚¨ú" and prev not in ("green","yellow"):
                status[ch] = "red"
    return status


# –†—É—Å—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
KB_LAYOUT = [
    list("–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä"),
    list("—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç"),
    list("—è—á—Å–º–∏—Ç—å–±—é")
]

def render_full_board_with_keyboard(
    guesses: list[str],
    secret: str,
    total_rows: int = 6,
    max_width_px: int = 1080
) -> BytesIO:
    padding   = 6
    board_def = 80
    cols      = len(secret)
    total_pad = (cols + 1) * padding

    # —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞ –¥–æ—Å–∫–∏
    board_sq = min(board_def, (max_width_px - total_pad) // cols)
    board_sq = max(20, board_sq)

    board_w = cols * board_sq + total_pad
    board_h = total_rows * board_sq + (total_rows + 1) * padding

    # –≤—ã–±–∏—Ä–∞–µ–º –º–∞—Å—à—Ç–∞–± –∫–ª–∞–≤–∏—à –ø–æ –¥–ª–∏–Ω–µ —Å–ª–æ–≤–∞
    if cols >= 8:
        factor = 0.6
    elif cols == 7:
        factor = 0.5
    elif cols == 6:
        factor = 0.4
    elif cols == 5:
        factor = 0.3
    elif cols == 4:
        factor = 0.25

    kb_sq   = max(12, int(board_sq * factor))
    kb_rows = len(KB_LAYOUT)
    img_h   = board_h + kb_rows * kb_sq + (kb_rows + 1) * padding

    img        = Image.new("RGB", (board_w, img_h), (30, 30, 30))
    draw       = ImageDraw.Draw(img)
    font_board = ImageFont.truetype("DejaVuSans-Bold.ttf", int(board_sq * 0.6))
    font_kb    = ImageFont.truetype("DejaVuSans-Bold.ttf", int(kb_sq * 0.6))

    # --- –∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ (6 —Å—Ç—Ä–æ–∫) ---
    for r in range(total_rows):
        y0 = padding + r * (board_sq + padding)
        if r < len(guesses):
            guess = guesses[r]
            fb    = make_feedback(secret, guess)
        else:
            guess = None
            fb    = [None] * cols

        for c in range(cols):
            x0 = padding + c * (board_sq + padding)
            x1 = x0 + board_sq
            y1 = y0 + board_sq

            color = fb[c]
            if color == GREEN:
                bg = (106,170,100)
            elif color == YELLOW:
                bg = (201,180,88)
            elif color == WHITE:
                bg = (128,128,128)
            else:
                bg = (255,255,255)

            draw.rectangle([x0,y0,x1,y1], fill=bg, outline=(0,0,0), width=2)

            if guess:
                ch = guess[c].upper()
                tc = (0,0,0) if bg == (255,255,255) else (255,255,255)
                bbox = draw.textbbox((0,0), ch, font=font_board)
                w, h = bbox[2]-bbox[0], bbox[3]-bbox[1]
                draw.text(
                    (x0 + (board_sq-w)/2, y0 + (board_sq-h)/2),
                    ch, font=font_board, fill=tc
                )

    # --- –º–∏–Ω–∏-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
    letter_status = compute_letter_status(secret, guesses)
    for ri, row in enumerate(KB_LAYOUT):
        y0      = board_h + padding + ri * (kb_sq + padding)
        row_len = len(row)
        row_pad = (row_len + 1) * padding
        row_w   = row_len * kb_sq + row_pad
        x_off   = (board_w - row_w) // 2

        for i, ch in enumerate(row):
            x0 = x_off + padding + i * (kb_sq + padding)
            x1 = x0 + kb_sq
            y1 = y0 + kb_sq

            st = letter_status.get(ch)
            if st == "green":
                bg = (106,170,100)
            elif st == "yellow":
                bg = (201,180,88)
            elif st == "red":
                bg = (128,128,128)
            else:
                bg = (255,255,255)

            draw.rectangle([x0,y0,x1,y1], fill=bg, outline=(0,0,0), width=1)
            tc = (0,0,0) if bg == (255,255,255) else (255,255,255)
            letter = ch.upper()
            bbox   = draw.textbbox((0,0), letter, font=font_kb)
            w, h   = bbox[2]-bbox[0], bbox[3]-bbox[1]
            draw.text(
                (x0 + (kb_sq-w)/2, y0 + (kb_sq-h)/2),
                letter, font=font_kb, fill=tc
            )

    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    return buf

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–ª–æ–≤–∞—Ä—å ---
ASK_LENGTH, GUESSING, FEEDBACK_CHOOSE, FEEDBACK_WORD, REMOVE_INPUT, BROADCAST= range(6)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ ---
BASE_FILE = Path("base_words.json")

# –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ base_words.json
with BASE_FILE.open("r", encoding="utf-8") as f:
    base_words = json.load(f)

# –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–ª–∏–Ω–∞ 4‚Äì11 —Å–∏–º–≤–æ–ª–æ–≤
filtered = [w for w in base_words if w.isalpha() and 4 <= len(w) <= 11]

# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ base_words.json
WORDLIST = sorted(filtered)
with BASE_FILE.open("w", encoding="utf-8") as f:
    json.dump(WORDLIST, f, ensure_ascii=False, indent=2)

GREEN, YELLOW, WHITE = "üü©", "üü®", "‚¨ú"

def make_feedback(secret: str, guess: str) -> str:
    fb = [None] * len(guess)
    secret_chars = list(secret)
    # 1) –∑–µ–ª–µ–Ω—ã–µ
    for i, ch in enumerate(guess):
        if secret[i] == ch:
            fb[i] = GREEN
            secret_chars[i] = None
    # 2) –∂–µ–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
    for i, ch in enumerate(guess):
        if fb[i] is None:
            if ch in secret_chars:
                fb[i] = YELLOW
                secret_chars[secret_chars.index(ch)] = None
            else:
                fb[i] = WHITE
    return "".join(fb)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def send_activity_periodic(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ) —à–ª–µ—Ç user_activity.json –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —à–ª–µ—Ç –µ–≥–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.
    """
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    activity_path = USER_FILE
    if not activity_path.exists():
        return

    content = activity_path.read_text(encoding="utf-8")
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram ‚Äî –ø—Ä–∏–º–µ—Ä–Ω–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    MAX_LEN = 4000

    if len(content) <= MAX_LEN:
        # –ú–æ–∂–Ω–æ –≤—Ç–∏—Å–Ω—É—Ç—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìã –¢–µ–∫—É—â–∏–π user_activity.json:\n<pre>{content}</pre>",
            parse_mode="HTML"
        )
    else:
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        with activity_path.open("rb") as f:
            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=InputFile(f, filename="user_activity.json"),
                caption="üìÅ user_activity.json (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞)"
            )


async def send_unfinished_games(context: ContextTypes.DEFAULT_TYPE):
    """
    –†–∞–∑ –≤ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å current_game
    –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É.
    """
    store = load_store()
    for uid, udata in store["users"].items():
        if not udata.get("notify_on_wakeup", True):
            continue
        if "current_game" in udata:
            cg = udata["current_game"]
            length = len(cg["secret"])
            attempts = cg["attempts"]
            try:
                await context.bot.send_message(
                    chat_id=int(uid),
                    text=(
                        f"–Ø –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Å–ø—è—á–∫–∏!\n"
                        f"‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞:\n"
                        f"{length}-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –≤—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempts}.\n"
                        "–ù–∞–∂–º–∏—Ç–µ /play –∏–ª–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!"
                    )
                )
            except Exception as e:
                logger.warning(f"–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å {uid}: {e}")


async def unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ –∏–ª–∏ –≤ —Ñ–∏–¥–±–µ–∫–µ ‚Äî –º–æ–ª—á–∏–º
    if context.user_data.get("game_active") or context.user_data.get("in_feedback") or context.user_data.get("in_remove"):
        return
    if context.user_data.pop("just_done", False):
        return
    await update.message.reply_text(
        "–Ø –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–ª–æ–≤–∞ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫üòï\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤–≤–µ–¥–∏ /play."
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    store = load_store()
    u = store["users"].get(str(update.effective_user.id), {})
    if "current_game" in u:
        cg = u["current_game"]
        # –∑–∞–ø–æ–ª–Ω—è–µ–º context.user_data –∏–∑ cg:
        context.user_data.update({
            "secret": cg["secret"],
            "length": len(cg["secret"]),
            "attempts": cg["attempts"],
            "guesses": cg["guesses"],
        })
        await update.message.reply_text(
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É: {len(cg['secret'])}-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, —Ç—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {cg['attempts']}. –í–≤–æ–¥–∏ –¥–æ–≥–∞–¥–∫—É:"
        )
        return GUESSING

    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Wordle Bot ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫.\n"
        "https://github.com/sqwirex/wordle-bot - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫–æ–¥–æ–º –±–æ—Ç–∞\n\n"
        "/play ‚Äî –Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É\n"
        "/hint ‚Äî –¥–∞–µ—Ç —Å–ª–æ–≤–æ –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –≤—ã –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å " \
        "(—Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–≤–ø–∞–¥–∞—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º)\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n"
        "/notification ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ –±–æ—Ç–∞\n"
        "/my_stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/global_stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è\n"
        "/feedback ‚Äî –µ—Å–ª–∏ —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏ –µ–≥–æ –≤ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, " \
        "–µ—Å–ª–∏ –∂–µ –Ω–∞–æ–±–æ—Ä–æ—Ç, —Ç—ã –≤–±–∏–ª —Å–ª–æ–≤–æ, –∞ –±–æ—Ç –µ–≥–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞–µ—Ç, –Ω–æ —Ç—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–π –µ–≥–æ –≤ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫. " \
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç —Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n\n"
        "–¢–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—ã–≤–∞–π: —è –µ—â–µ —É—á—É—Å—å –∏ –Ω–µ –∑–Ω–∞—é –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤!\n"
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –µ—Å–ª–∏ —è —Ä—É–≥–∞—é—Å—å –Ω–∞ —Ç–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî –º–Ω–µ –µ—Å—Ç—å —á–µ–º—É —É—á–∏—Ç—å—Å—è :)\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –∏–Ω–æ–≥–¥–∞ —è –º–æ–≥—É ¬´–≤—ã–∫–ª—é—á–∞—Ç—å—Å—è¬ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∂–∏–≤—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!\n"
        "–ï—Å–ª–∏ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏ –Ω–∞–∂–º–∏ /play –∏–ª–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–µ—Ä–≤–∞–≤—à—É—é—Å—è –∏–≥—Ä—É.\n\n"
    )


async def ask_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["state"] = ASK_LENGTH
    update_user_activity(update.effective_user)
    context.user_data["game_active"] = True
    store = load_store()
    u = store["users"].get(str(update.effective_user.id), {})
    if "current_game" in u:
        cg = u["current_game"]
        # –∑–∞–ø–æ–ª–Ω—è–µ–º context.user_data –∏–∑ cg:
        context.user_data.update({
            "secret": cg["secret"],
            "length": len(cg["secret"]),
            "attempts": cg["attempts"],
            "guesses": cg["guesses"],
        })
        await update.message.reply_text(
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É: {len(cg['secret'])}-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, —Ç—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {cg['attempts']}. –í–≤–æ–¥–∏ –¥–æ–≥–∞–¥–∫—É:"
        )
        return GUESSING
    
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ? (4‚Äì11)")
    return ASK_LENGTH


async def receive_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    text = update.message.text.strip()
    if not text.isdigit() or not 4 <= int(text) <= 11:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 11.")
        return ASK_LENGTH

    length = int(text)
    candidates = [w for w in WORDLIST if len(w) == length]
    if not candidates:
        await update.message.reply_text("–ù–µ –Ω–∞—à–µ–ª —Å–ª–æ–≤ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ:")
        return ASK_LENGTH

    secret = random.choice(candidates)
    
    store = load_store()
    u = store["users"].setdefault(str(update.effective_user.id), {"stats": {"games_played":0,"wins":0,"losses":0}})
    # –ó–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    u["current_game"] = {
        "secret": secret,
        "attempts": 0,
        "guesses": [],
    }
    save_store(store)

    context.user_data["secret"] = secret
    context.user_data["length"] = length
    context.user_data["attempts"] = 0
    context.user_data["guesses"] = []
    context.user_data["state"] = GUESSING

    await update.message.reply_text(
        f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤. –£ —Ç–µ–±—è 6 –ø–æ–ø—ã—Ç–æ–∫. –í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –¥–æ–≥–∞–¥–∫—É:"
    )
    
    return GUESSING


async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    store   = load_store()
    user    = store["users"].setdefault(user_id, {
        "first_name": update.effective_user.first_name,
        "stats": {"games_played": 0, "wins": 0, "losses": 0}
    })

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
    user["last_seen_msk"] = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    if "current_game" not in user:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, –Ω–∞—á–Ω–∏ /play")
        return ConversationHandler.END

    cg     = user["current_game"]
    guess = normalize(update.message.text)
    secret = cg["secret"]
    length = len(secret)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(guess) != length or guess not in WORDLIST:
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤.")
        return GUESSING

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ–¥
    cg["guesses"].append(guess)
    cg["attempts"] += 1
    save_store(store)

    # –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É –∏–∑ 6 —Å—Ç—Ä–æ–∫ + –º–∏–Ω–∏-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∏–∑—É.
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∫—Ä—É–ø–Ω–µ–µ –¥–ª—è —Å–ª–æ–≤ ‚â•8 –±—É–∫–≤, —á—É—Ç—å –º–µ–Ω—å—à–µ –¥–ª—è 7 –∏ –µ—â–µ –º–µ–Ω—å—à–µ –¥–ª—è 4‚Äì5.
    img_buf = render_full_board_with_keyboard(
        guesses=cg["guesses"],
        secret=secret,
        total_rows=6,
        max_width_px=1080
    )
    await update.message.reply_photo(
        photo=InputFile(img_buf, filename="wordle_board.png"),
        caption=f"–ü–æ–ø—ã—Ç–∫–∞ {cg['attempts']} –∏–∑ 6"
    )

    # ‚Äî‚Äî –ü–æ–±–µ–¥–∞ ‚Äî‚Äî
    if guess == secret:
        stats = user["stats"]
        stats["games_played"] += 1
        stats["wins"] += 1
        stats["win_rate"] = stats["wins"] / stats["games_played"]

        g = store["global"]
        g["total_games"] += 1
        g["total_wins"] += 1
        g["win_rate"] = g["total_wins"] / g["total_games"]

        top_uid, top_data = max(
            store["users"].items(),
            key=lambda kv: kv[1]["stats"]["wins"]
        )
        store["global"]["top_player"] = {
            "user_id":  top_uid,
            "username": top_data.get("username") or top_data.get("first_name", ""),
            "wins":     top_data["stats"]["wins"]
        }

        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£–≥–∞–¥–∞–ª –∑–∞ {cg['attempts']} "
            f"{'–ø–æ–ø—ã—Ç–∫–∞' if cg['attempts']==1 else '–ø–æ–ø—ã—Ç–∫–∏' if 2<=cg['attempts']<=4 else '–ø–æ–ø—ã—Ç–æ–∫'}.\n"
            "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤–Ω–æ–≤—å, –≤–≤–µ–¥–∏ /play."
        )
        del user["current_game"]
        context.user_data.pop("game_active", None)
        context.user_data["just_done"] = True
        save_store(store)
        return ConversationHandler.END

    # ‚Äî‚Äî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ ‚Äî‚Äî
    if cg["attempts"] >= 6:
        stats = user["stats"]
        stats["games_played"] += 1
        stats["losses"] += 1
        stats["win_rate"] = stats["wins"] / stats["games_played"]

        g = store["global"]
        g["total_games"] += 1
        g["total_losses"] += 1
        g["win_rate"] = g["total_wins"] / g["total_games"]

        await update.message.reply_text(
            f"üíî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ —Å–ª–æ–≤–æ ¬´{secret}¬ª.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏ /play."
        )
        del user["current_game"]
        context.user_data.pop("game_active", None)
        context.user_data["just_done"] = True
        save_store(store)
        return ConversationHandler.END

    # –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
    return GUESSING

async def ignore_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã /start –∏ /play –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ /reset.")
    return ASK_LENGTH


async def ignore_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã /start –∏ /play –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ /reset.")
    return GUESSING


async def hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    store = load_store()
    user_entry = store["users"].setdefault(user_id, {
        "stats": {"games_played": 0, "wins": 0, "losses": 0}
    })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if "current_game" not in user_entry:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")
        return ConversationHandler.END

    cg = user_entry["current_game"]

    # –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ ‚Äî –Ω–µ –¥–∞–µ–º –µ—â–µ –æ–¥–Ω—É
    if cg.get("hint_used", False):
        await update.message.reply_text("–ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return GUESSING

    secret = cg["secret"]
    length = len(secret)

    # –°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –Ω—É–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å
    hint_counts = {4:1, 5:2, 6:2, 7:3, 8:3, 9:4, 10:4, 11:5}
    num_letters = hint_counts.get(length, 1)

    # –°—á–∏—Ç–∞–µ–º –±—É–∫–≤—ã –≤ secret
    secret_counter = Counter(secret)

    # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: —Ä–∞–∑–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –Ω–æ >= num_letters –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    candidates = []
    for w in WORDLIST:
        if len(w) != length or w == secret:
            continue
        w_counter = Counter(w)
        # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ –º–∏–Ω–∏–º—É–º—É
        common = sum(min(secret_counter[ch], w_counter[ch]) for ch in w_counter)
        if common == num_letters:
            candidates.append(w)

    if not candidates:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç.")
        return GUESSING

    hint_word = random.choice(candidates)

    # –û—Ç–º–µ—á–∞–µ–º –≤ JSON, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤–∑—è—Ç–∞
    cg["hint_used"] = True
    save_store(store)

    await update.message.reply_text(f"üîç –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_word}")
    return GUESSING


async def hint_not_allowed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ /hint –≤—ã–∑–≤–∞–ª–∏ –Ω–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã."""
    await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")
    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ–º –¥–ª–∏–Ω—É ‚Äî –æ—Å—Ç–∞–Ω–µ–º—Å—è –≤ ASK_LENGTH, –∏–Ω–∞—á–µ –≤ GUESSING
    return context.user_data.get("state", ASK_LENGTH)


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)

    store = load_store()
    uid = str(update.effective_user.id)
    user = store["users"].get(uid)
    if user and "current_game" in user:
        del user["current_game"]
        save_store(store)

    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ñ–¥—É /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
    return ConversationHandler.END


async def reset_global(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É: /play")


async def notification_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    store = load_store()
    user = store["users"].setdefault(uid, {"stats": {...}})
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    current = user.get("notify_on_wakeup", True)
    user["notify_on_wakeup"] = not current
    save_store(store)
    state = "–≤–∫–ª—é—á–µ–Ω—ã" if not current else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ –±–æ—Ç–∞ {state}.")


async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî —Ç–æ–ª—å–∫–æ –≤–Ω–µ –∏–≥—Ä—ã."""
    update_user_activity(update.effective_user)
    store = load_store()
    uid = str(update.effective_user.id)
    user = store["users"].get(uid)
    if not user or "current_game" in user:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–µ –∏–≥—Ä—ã.")
        return
    s = user.get("stats", {})
    await update.message.reply_text(
        "```"
        f"üßë –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
        f"üé≤ –í—Å–µ–≥–æ –∏–≥—Ä: {s.get('games_played',0)}\n"
        f"üèÜ –ü–æ–±–µ–¥: {s.get('wins',0)}\n"
        f"üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {s.get('losses',0)}\n"
        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç: {s.get('win_rate',0.0)*100:.2f}%"
        "```",
        parse_mode="Markdown"
    )


async def global_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî —Ç–æ–ª—å–∫–æ –≤–Ω–µ –∏–≥—Ä—ã."""
    store = load_store()
    g = store["global"]
    # –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Ç–∏–∏ ‚Äî –∑–∞–ø—Ä–µ—Ç
    uid = str(update.effective_user.id)
    user = store["users"].get(uid)
    if user and "current_game" in user:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–µ –∏–≥—Ä—ã.")
        return
    
    tp = g.get("top_player", {})
    if tp:
        top_line = f"–°–∏–ª—å–Ω–µ–π—à–∏–π: @{tp['username']} ({tp['wins']} –ø–æ–±–µ–¥)\n\n"
    else:
        top_line = ""
    
    await update.message.reply_text(
        "```"
        f"üåê –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üé≤ –í—Å–µ–≥–æ –∏–≥—Ä: {g['total_games']}\n"
        f"üèÜ –ü–æ–±–µ–¥: {g['total_wins']}\n"
        f"üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {g['total_losses']}\n"
        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç: {g['win_rate']*100:.2f}%\n\n"
        f"{top_line}"
        "```",
        parse_mode="Markdown"
    )


async def only_outside_game(update, context):
    await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–µ –∏–≥—Ä—ã.")
    # –≤–µ—Ä–Ω–µ–º —Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–µ–π—á–∞—Å —é–∑–µ—Ä:
    return context.user_data.get("state", ConversationHandler.END)


async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–∞–ø—Ä–µ—Ç–∏–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    store = load_store()
    u = store["users"].get(str(update.effective_user.id), {})
    if "current_game" in u:
        await update.message.reply_text(
            "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ–∫–∞ –∏–¥–µ—Ç –∏–≥—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏ –∏–≥—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ /reset.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END
    
    if context.user_data.get("game_active"):
        await update.message.reply_text(
            "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ–∫–∞ –∏–¥–µ—Ç –∏–≥—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏ –∏–≥—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ /reset.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫
    keyboard = [
        ["–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"],
        ["–û—Ç–º–µ–Ω–∞"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ?", reply_markup=markup)

    # –∑–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["feedback_state"] = FEEDBACK_CHOOSE
    context.user_data["in_feedback"] = True
    return FEEDBACK_CHOOSE


async def feedback_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        context.user_data.pop("in_feedback", None)
        context.user_data["just_done"] = True
        return ConversationHandler.END

    if text not in ("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return FEEDBACK_CHOOSE

    # –∫—É–¥–∞ –∫–ª–∞–¥–µ–º
    context.user_data["fb_target"] = "black" if text == "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫" else "white"
    # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–æ–≤–æ
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove()
    )

    context.user_data["feedback_state"] = FEEDBACK_WORD
    return FEEDBACK_WORD


async def feedback_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    word = normalize(update.message.text)
    target = context.user_data["fb_target"]

    if SUGGESTIONS_FILE.exists() and SUGGESTIONS_FILE.stat().st_size >= 1_000_000:
        await update.message.reply_text(
            "–ü—Ä–æ—Å—Ç–∏, —Å–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî —Ñ–∞–π–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É–∂–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π."
        )
        context.user_data.pop("in_feedback", None)
        context.user_data["just_done"] = True
        return ConversationHandler.END

    suggestions = load_suggestions()

    # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    if target == "black":
        if word in WORDLIST:
            suggestions["black"].add(word)
            save_suggestions(suggestions)
            resp = "–°–ø–∞—Å–∏–±–æ, –¥–æ–±–∞–≤–∏–ª –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        else:
            resp = "–ù–µ–ª—å–∑—è: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ."

    # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –¥–ª–∏–Ω–∞ 4‚Äì11
    else:
        if 4 <= len(word) <= 11 and word not in WORDLIST:
            suggestions["white"].add(word)
            save_suggestions(suggestions)
            resp = "–°–ø–∞—Å–∏–±–æ, –¥–æ–±–∞–≤–∏–ª –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        else:
            if word in WORDLIST:
                resp = "–ù–µ–ª—å–∑—è: —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ."
            elif not (4 <= len(word) <= 11):
                resp = "–ù–µ–ª—å–∑—è: –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 11 —Å–∏–º–≤–æ–ª–æ–≤."
            else:
                resp = "–ù–µ–ª—å–∑—è: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∏ –∏–∑ 4‚Äì11 –±—É–∫–≤."

    await update.message.reply_text(resp)
    context.user_data.pop("in_feedback", None)
    context.user_data["just_done"] = True
    return ConversationHandler.END


async def feedback_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def block_during_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ª—é–±–æ–π –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –≤–≤–æ–¥ –∑–∞–≥–ª—É—à–∞–µ–º
    await update.message.reply_text(
        "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –≤–≤–æ–¥ –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞, –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."
    )
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return context.user_data.get("feedback_state", FEEDBACK_CHOOSE)


async def feedback_not_allowed_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ–∫–∞ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞. "
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É (4‚Äì11)."
    )
    return ASK_LENGTH


async def feedback_not_allowed_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–¥–±–µ–∫ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã. "
        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ /reset."
    )
    return GUESSING


async def dict_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    if update.effective_user.id != ADMIN_ID:
        return

    # –ß–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ base_words.json
    with BASE_FILE.open("r", encoding="utf-8") as f:
        fresh_list = json.load(f)

    total = len(fresh_list)
    data = "\n".join(fresh_list)

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã (4‚Äì11)
    length_counts = Counter(len(w) for w in fresh_list)
    stats_lines = [
        f"{length} –±—É–∫–≤: {length_counts.get(length, 0)}"
        for length in range(4, 12)
    ]
    stats_text = "\n".join(stats_lines)

    # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
    bio = BytesIO(data.encode("utf-8"))
    bio.name = "wordlist.txt"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–±—â–µ–π –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await update.message.reply_document(
        document=bio,
        filename="wordlist.txt",
        caption=(
            f"üìö –í —Å–ª–æ–≤–∞—Ä–µ –≤—Å–µ–≥–æ {total} —Å–ª–æ–≤.\n\n"
            f"üî¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ:\n{stats_text}"
        )
    )


async def dump_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    path = USER_FILE  # —ç—Ç–æ Path("user_activity.json")
    if not path.exists():
        return await update.message.reply_text("–§–∞–π–ª user_activity.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ø—Ä–æ—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç, –∏ –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    content = path.read_text("utf-8")
    if len(content) < 3000:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–¥–æ–≤–æ–º –±–ª–æ–∫–µ
        return await update.message.reply_text(
            f"<pre>{content}</pre>", parse_mode="HTML"
        )

    # –∏–Ω–∞—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    with path.open("rb") as f:
        await update.message.reply_document(
            document=InputFile(f, filename=path.name),
            caption="üìÅ user_activity.json"
        )


async def suggestions_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        return
    sugg = load_suggestions()
    black = sugg.get("black", [])
    white = sugg.get("white", [])
    text = (
        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n"
        + (", ".join(f'"{w}"' for w in black) if black else "‚Äî –ø—É—Å—Ç–æ")
        + "\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n"
        + (", ".join(f'"{w}"' for w in white) if white else "‚Äî –ø—É—Å—Ç–æ")
    )
    await update.message.reply_text(text)


async def suggestions_remove_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    store = load_store()
    u = store["users"].get(str(update.effective_user.id), {})
    if "current_game" in u or context.user_data.get("game_active"):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–µ –∏–≥—Ä—ã.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤—Å–µ –æ–∫ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è
    await update.message.reply_text(
        "–í–≤–µ–¥–∏, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å (—Ñ–æ—Ä–º–∞—Ç):\n"
        "black: —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2\n"
        "white: —Å–ª–æ–≤–æ3, —Å–ª–æ–≤–æ4\n\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return REMOVE_INPUT


async def suggestions_remove_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        return ConversationHandler.END
    
    context.user_data["in_remove"] = True
    text = update.message.text.strip()
    sugg = load_suggestions()
    removed = {"black": [], "white": []}

    # –ø–∞—Ä—Å–∏–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    for line in text.splitlines():
        if ":" not in line:
            continue
        key, vals = line.split(":", 1)
        key = key.strip().lower()
        if key not in ("black", "white"):
            continue
        # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        words = [w.strip().lower() for w in vals.split(",") if w.strip()]
        for w in words:
            if w in sugg[key]:
                sugg[key].remove(w)
                removed[key].append(w)

    save_suggestions(sugg)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    parts = []
    if removed["black"]:
        parts.append(f'–ò–∑ —á–µ—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {", ".join(removed["black"])}')
    if removed["white"]:
        parts.append(f'–ò–∑ –±–µ–ª–æ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {", ".join(removed["white"])}')
    if not parts:
        parts = ["–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ."]
    await update.message.reply_text("\n".join(parts))
    context.user_data.pop("in_remove", None)
    context.user_data["just_done"] = True
    return ConversationHandler.END


async def suggestions_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    sugg = load_suggestions()  # –ø–æ–ª—É—á–∞–µ–º {'black': set(), 'white': set()}
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å
    with BASE_FILE.open("r", encoding="utf-8") as f:
        words = set(json.load(f))
    # –£–¥–∞–ª—è–µ–º ¬´—á—ë—Ä–Ω—ã–µ¬ª
    words -= sugg["black"]
    # –î–æ–±–∞–≤–ª—è–µ–º ¬´–±–µ–ª—ã–µ¬ª
    words |= sugg["white"]
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    new_list = sorted(words)
    with BASE_FILE.open("w", encoding="utf-8") as f:
        json.dump(new_list, f, ensure_ascii=False, indent=2)
    # –û—á–∏—â–∞–µ–º suggestions.json
    save_suggestions({"black": set(), "white": set()})
    await update.message.reply_text(
        f"–°–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω: +{len(sugg['white'])}, -{len(sugg['black'])}. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã."
    )


async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    context.user_data["in_broadcast"] = True
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    return BROADCAST


async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    store = load_store()      # –±–µ—Ä–µ–º —Ç–µ—Ö, –∫–æ–≥–æ –º—ã –∫–æ–≥–¥–∞-—Ç–æ –∑–∞–ø–∏—Å–∞–ª–∏
    failed = []
    for uid in store["users"].keys():
        try:
            await context.bot.send_message(chat_id=int(uid), text=text)
        except Exception:
            failed.append(uid)
    msg = "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"
    if failed:
        msg += f"\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join(failed)}"
    await update.message.reply_text(msg)
    context.user_data.pop("in_broadcast", None)
    context.user_data["just_done"] = True
    return ConversationHandler.END


async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.pop("in_broadcast", None)
    return ConversationHandler.END


def main():
    
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    app = (
        ApplicationBuilder()
        .token(token)
        .post_init(set_commands)
        .build()
    )
	
    store = load_store()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    app.job_queue.run_once(send_activity_periodic, when=0)
    app.job_queue.run_once(send_unfinished_games, when=1)


    feedback_conv = ConversationHandler(
    entry_points=[CommandHandler("feedback", feedback_start)],
    states={
        FEEDBACK_CHOOSE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_choose),
            MessageHandler(filters.ALL, block_during_feedback),
        ],
        FEEDBACK_WORD: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_word),
            MessageHandler(filters.ALL, block_during_feedback),
        ],
    },
    fallbacks=[CommandHandler("cancel", feedback_cancel)],
    allow_reentry=True
    )
    app.add_handler(feedback_conv)
    
    
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("play", ask_length),
            CommandHandler("start", start),
        ],
        states={
            ASK_LENGTH: [
                CommandHandler("feedback", feedback_not_allowed_ask),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_length),
                CommandHandler("start", ignore_ask),
                CommandHandler("play", ignore_ask),
                CommandHandler("hint", hint_not_allowed),
                CommandHandler("reset", reset),
                CommandHandler("my_stats", only_outside_game),
                CommandHandler("global_stats", only_outside_game),
            ],
            GUESSING: [
                CommandHandler("feedback", feedback_not_allowed_guess),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess),
                CommandHandler("start", ignore_guess),
		        CommandHandler("play", ignore_guess),
                CommandHandler("hint", hint),
                CommandHandler("reset", reset),
                CommandHandler("my_stats", only_outside_game),
                CommandHandler("global_stats", only_outside_game),
            ],
        },
        fallbacks=[
            CommandHandler("reset", reset),
       ],
    )
    app.add_handler(conv)

    # 1) –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    app.add_handler(CommandHandler("suggestions_view", suggestions_view))
    app.add_handler(CommandHandler("suggestions_approve", suggestions_approve))

    # 2) —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ConversationHandler
    remove_conv = ConversationHandler(
        entry_points=[CommandHandler("suggestions_remove", suggestions_remove_start)],
        states={
            REMOVE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, suggestions_remove_process),
            ],
        },
        fallbacks=[CommandHandler("cancel", feedback_cancel)],
        allow_reentry=True,
    )
    app.add_handler(remove_conv)

    broadcast_conv = ConversationHandler(
    entry_points=[CommandHandler("broadcast", broadcast_start)],
    states={
        BROADCAST: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_send),
        ],
    },
    fallbacks=[CommandHandler("broadcast_cancel", broadcast_cancel)],
    allow_reentry=True,
    )
    app.add_handler(broadcast_conv)

    app.add_handler(
    MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_text),
    group=99
    )

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("hint", hint_not_allowed))
    app.add_handler(CommandHandler("reset", reset_global))
    app.add_handler(CommandHandler("notification", notification_toggle))
    app.add_handler(CommandHandler("my_stats", my_stats))
    app.add_handler(CommandHandler("global_stats", global_stats))
    app.add_handler(CommandHandler("dict_file", dict_file))
    app.add_handler(CommandHandler("dump_activity", dump_activity))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
