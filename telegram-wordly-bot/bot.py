import os
import logging
import random
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from wordfreq import iter_wordlist
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è Conversation
ASK_LENGTH, GUESSING = range(2)

# –°–ª–æ–≤–∞—Ä—å ¬´small¬ª –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
WORDLIST = list(iter_wordlist("ru", wordlist="small"))

# –≠–º–æ–¥–∂–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
GREEN, YELLOW, RED, UNK = "üü©", "üü®", "üü•", "‚¨ú"


def make_feedback(secret: str, guess: str) -> str:
    fb = [None] * len(guess)
    secret_chars = list(secret)
    # 1) –∑–µ–ª—ë–Ω—ã–µ
    for i, ch in enumerate(guess):
        if secret[i] == ch:
            fb[i] = GREEN
            secret_chars[i] = None
    # 2) –∂—ë–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
    for i, ch in enumerate(guess):
        if fb[i] is None:
            if ch in secret_chars:
                fb[i] = YELLOW
                secret_chars[secret_chars.index(ch)] = None
            else:
                fb[i] = RED
    return "".join(fb)


def compute_letter_status(secret: str, guesses: list[str]) -> dict[str, str]:
    status: dict[str, str] = {}
    for guess in guesses:
        # –∑–µ–ª—ë–Ω—ã–µ
        for i, ch in enumerate(guess):
            if secret[i] == ch:
                status[ch] = "green"
        # –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –∂—ë–ª—Ç—ã—Ö
        secret_chars = list(secret)
        for i, ch in enumerate(guess):
            if status.get(ch) == "green":
                secret_chars[i] = None
        # –∂—ë–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
        for i, ch in enumerate(guess):
            if status.get(ch) == "green":
                continue
            if ch in secret_chars:
                if status.get(ch) != "green":
                    status[ch] = "yellow"
                secret_chars[secret_chars.index(ch)] = None
            else:
                if status.get(ch) not in ("green", "yellow"):
                    status[ch] = "red"
    return status


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Wordly Bot ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫.\n\n"
        "/play ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/my_letters ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–≤–∞—Ö –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n\n"
        "–¢–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—ã–≤–∞–π: —è –µ—â—ë —É—á—É—Å—å –∏ –Ω–µ –∑–Ω–∞—é –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤!\n"
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –µ—Å–ª–∏ —è —Ä—É–≥–∞—é—Å—å –Ω–∞ —Ç–≤–æ—ë —Å–ª–æ–≤–æ ‚Äî –º–Ω–µ –µ—Å—Ç—å —á–µ–º—É —É—á–∏—Ç—å—Å—è :)\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –∏–Ω–æ–≥–¥–∞ —è –º–æ–≥—É ¬´–≤—ã–∫–ª—é—á–∞—Ç—å—Å—è¬ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∂–∏–≤—É –≤ –≥—Ä—è–∑–Ω–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –∞ –Ω–µ –≤ —É—é—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ :(\n"
        "–ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é, –≤–µ—Ä–Ω–∏—Å—å —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –∏ –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ—Å–ª–µ —Ç–∞–∫–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ —è —Ç–µ—Ä—è—é –ø–∞–º—è—Ç—å –∏ –∑–∞–±—ã–≤–∞—é, —á—Ç–æ –º—ã –∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—é –ª–µ–Ω—å –¥–µ–ª–∞—Ç—å –ë–î —Å —Å–µ—Å—Å–∏—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤ :(\n"
        "–ü–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–¥—ë—Ç—Å—è —É–≥–∞–¥—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (—Ö_—Ö)."
    )


async def ask_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ? (4‚Äì11)")
    return ASK_LENGTH


async def receive_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit() or not 4 <= int(text) <= 11:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 11.")
        return ASK_LENGTH

    length = int(text)
    candidates = [w for w in WORDLIST if len(w) == length]
    if not candidates:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Å–ª–æ–≤ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:")
        return ASK_LENGTH

    secret = random.choice(candidates)
    context.user_data["secret"] = secret
    context.user_data["length"] = length
    context.user_data["attempts"] = 0
    context.user_data["guesses"] = []

    await update.message.reply_text(
        f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤. –£ —Ç–µ–±—è 6 –ø–æ–ø—ã—Ç–æ–∫. –í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –¥–æ–≥–∞–¥–∫—É:"
    )
    return GUESSING


async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    guess = update.message.text.strip().lower()
    secret = context.user_data["secret"]
    length = context.user_data["length"]

    if len(guess) != length or guess not in WORDLIST:
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤.")
        return GUESSING

    context.user_data["guesses"].append(guess)
    context.user_data["attempts"] += 1
    attempts = context.user_data["attempts"]

    fb = make_feedback(secret, guess)
    await update.message.reply_text(fb)

    # –ø–æ–±–µ–¥–∞
    if guess == secret:
        context.user_data.clear()
        form = "–ø–æ–ø—ã—Ç–∫–∞" if attempts % 10 == 1 and attempts % 100 != 11 else (
               "–ø–æ–ø—ã—Ç–∫–∏" if 2 <= attempts % 10 <= 4 and not 12 <= attempts % 100 <= 14
               else "–ø–æ–ø—ã—Ç–æ–∫")
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£–≥–∞–¥–∞–ª –∑–∞ {attempts} {form}.\n"
            "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤–Ω–æ–≤—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /play."
        )
        return ConversationHandler.END

    # –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
    if attempts >= 6:
        context.user_data.clear()
        await update.message.reply_text(
            f"üíî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ —Å–ª–æ–≤–æ ¬´{secret}¬ª.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /play."
        )
        return ConversationHandler.END

    return GUESSING


async def my_letters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data

    # –≤–Ω–µ –∏–≥—Ä—ã
    if "secret" not in data:
        await update.message.reply_text(
            "–°–µ–π—á–∞—Å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ ‚Äî –Ω–∞—á–Ω–∏ –∏–≥—Ä—É: /play"
        )
        return

    guesses = data.get("guesses", [])
    alphabet = list("–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è")

    # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã –±–µ–ª—ã–º
    if not guesses:
        await update.message.reply_text(UNK + " " + " ".join(alphabet))
        return

    status = compute_letter_status(data["secret"], guesses)

    greens  = [ch for ch in alphabet if status.get(ch) == "green"]
    yellows = [ch for ch in alphabet if status.get(ch) == "yellow"]
    reds    = [ch for ch in alphabet if status.get(ch) == "red"]
    unused  = [ch for ch in alphabet if ch not in status]

    lines = []
    if greens:  lines.append(GREEN  + " " + " ".join(greens))
    if yellows: lines.append(YELLOW + " " + " ".join(yellows))
    if reds:    lines.append(RED    + " " + " ".join(reds))
    if unused:  lines.append(UNK    + " " + " ".join(unused))

    await update.message.reply_text("\n".join(lines))


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ñ–¥—É /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
    return ConversationHandler.END


async def reset_global(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É: /play")


IGN_MSG = "–ö–æ–º–∞–Ω–¥—ã /start –∏ /play –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ /reset."


async def ignore_during(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return ASK_LENGTH  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏


def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    app = ApplicationBuilder().token(token).build()

    # ConversationHandler –¥–ª—è /play
    conv = ConversationHandler(
        entry_points=[CommandHandler("play", ask_length)],
        states={
            ASK_LENGTH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_length),
                CommandHandler("start", ignore_during),
                CommandHandler("play", ignore_during),
                CommandHandler("reset", reset),
            ],
            GUESSING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess),
                CommandHandler("my_letters", my_letters),
                CommandHandler("start", ignore_during),
                CommandHandler("play", ignore_during),
                CommandHandler("reset", reset),
            ],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )
    app.add_handler(conv)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("my_letters", my_letters))
    app.add_handler(CommandHandler("reset", reset_global))
    app.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫ polling
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
