import os
import logging
import random
import pymorphy2
import json
from datetime import datetime
from pathlib import Path
from zoneinfo import ZoneInfo  # Python 3.9+
from telegram import InputFile

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from wordfreq import iter_wordlist, zipf_frequency
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_FILE = Path("user_activity.json")
VOCAB_FILE = Path("vocabulary.json")

def load_store() -> dict:
    if not USER_FILE.exists(): return {"users": {}, "global": {...}}
    try:
        return json.loads(USER_FILE.read_text("utf-8"))
    except json.JSONDecodeError:
        return {"users": {}, "global": {"total_games": 0, "total_wins": 0, "total_losses": 0, "win_rate": 0.0}}

def save_store(store: dict):
    USER_FILE.write_text(json.dumps(store, ensure_ascii=False, indent=2), "utf-8")

def load_user_activity() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç user_activity.json.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    if not USER_FILE.exists():
        return {}
    text = USER_FILE.read_text(encoding="utf-8").strip()
    if not text:
        return {}
    try:
        return json.loads(text)
    except json.JSONDecodeError:
        # –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
        logger.warning(f"{USER_FILE} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
        return {}

def save_user_activity(data: dict) -> None:
    USER_FILE.write_text(
        json.dumps(data, ensure_ascii=False, indent=2),
        encoding="utf-8"
    )

def update_user_activity(user) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ telegram.User.to_dict()
    –ø–ª—é—Å timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.
    """
    data = load_user_activity()
    uid = str(user.id)
    entry = user.to_dict()  # –≤–∫–ª—é—á–∞–µ—Ç id, is_bot, first_name, last_name, username, language_code, is_premium –∏ –¥—Ä.
    entry["last_seen_msk"] = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()
    data[uid] = entry
    save_user_activity(data)


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–ª–æ–≤–∞—Ä—å ---
ASK_LENGTH, GUESSING = range(2)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä—Ñ–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
morph = pymorphy2.MorphAnalyzer(lang="ru")

# —á–∞—Å—Ç–æ—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ (—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –ø–æ –≤–∫—É—Å—É)
ZIPF_THRESHOLD = 2.5

_v = json.loads(VOCAB_FILE.read_text(encoding="utf-8"))

BLACK_LIST = set(_v.get("black_list", []))
WHITE_LIST = set(_v.get("white_list", []))

_base = {
    w
    for w in iter_wordlist("ru", wordlist="large")
    if (
        w.isalpha()
        and 4 <= len(w) <= 11
        and w not in BLACK_LIST
        and zipf_frequency(w, "ru") >= ZIPF_THRESHOLD
    )
    for p in [morph.parse(w)[0]]
    if p.tag.POS == "NOUN" and p.normal_form == w
}

# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º, —á—Ç–æ–±—ã —ç—Ç–∏ —Å–ª–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏
WORDLIST = sorted(_base | {w for w in WHITE_LIST if 4 <= len(w) <= 11})

GREEN, YELLOW, RED, UNK = "üü©", "üü®", "üü•", "‚¨ú"


def make_feedback(secret: str, guess: str) -> str:
    fb = [None] * len(guess)
    secret_chars = list(secret)
    # 1) –∑–µ–ª—ë–Ω—ã–µ
    for i, ch in enumerate(guess):
        if secret[i] == ch:
            fb[i] = GREEN
            secret_chars[i] = None
    # 2) –∂—ë–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
    for i, ch in enumerate(guess):
        if fb[i] is None:
            if ch in secret_chars:
                fb[i] = YELLOW
                secret_chars[secret_chars.index(ch)] = None
            else:
                fb[i] = RED
    return "".join(fb)


def compute_letter_status(secret: str, guesses: list[str]) -> dict[str, str]:
    status: dict[str, str] = {}
    for guess in guesses:
        # –∑–µ–ª—ë–Ω—ã–µ
        for i, ch in enumerate(guess):
            if secret[i] == ch:
                status[ch] = "green"
        # –∫–æ–ø–∏—è –¥–ª—è –∂—ë–ª—Ç—ã—Ö
        secret_chars = list(secret)
        for i, ch in enumerate(guess):
            if status.get(ch) == "green":
                secret_chars[i] = None
        # –∂—ë–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
        for i, ch in enumerate(guess):
            if status.get(ch) == "green":
                continue
            if ch in secret_chars:
                if status.get(ch) != "green":
                    status[ch] = "yellow"
                secret_chars[secret_chars.index(ch)] = None
            else:
                if status.get(ch) not in ("green", "yellow"):
                    status[ch] = "red"
    return status


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store = load_store()
    u = store["users"].get(str(update.effective_user.id), {})
    if "current_game" in u:
        cg = u["current_game"]
        # –∑–∞–ø–æ–ª–Ω—è–µ–º context.user_data –∏–∑ cg:
        context.user_data.update({
            "secret": cg["secret"],
            "length": len(cg["secret"]),
            "attempts": cg["attempts"],
            "guesses": cg["guesses"],
        })
        await update.message.reply_text(
            f"–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∏–≥—Ä–∞: {len(cg['secret'])}-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, —Ç—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {cg['attempts']}. –í–≤–æ–¥–∏ –¥–æ–≥–∞–¥–∫—É:"
        )
        return GUESSING

    update_user_activity(update.effective_user)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Wordly Bot ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫.\n\n"
        "/play ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/my_letters ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±—É–∫–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n\n"
        "–¢–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—ã–≤–∞–π: —è –µ—â—ë —É—á—É—Å—å –∏ –Ω–µ –∑–Ω–∞—é –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤!\n"
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –µ—Å–ª–∏ —è —Ä—É–≥–∞—é—Å—å –Ω–∞ —Ç–≤–æ—ë —Å–ª–æ–≤–æ ‚Äî –º–Ω–µ –µ—Å—Ç—å —á–µ–º—É —É—á–∏—Ç—å—Å—è :)\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –∏–Ω–æ–≥–¥–∞ —è –º–æ–≥—É ¬´–≤—ã–∫–ª—é—á–∞—Ç—å—Å—è¬ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∂–∏–≤—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!\n"
        "–ï—Å–ª–∏ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏ –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —è –∑–∞–±—ã–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ç–∞–∫ —á—Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—Ö_—Ö).\n\n"
	"–ò –µ—â–µ, –Ω–µ –∑–∞–±—ã–≤–∞–π, –±—É–∫–≤–∞ –Å ‚â† –ï. –£–¥–∞—á–∏!"
    )

async def send_activity_periodic(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ) —à–ª—ë—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ user_activity.json –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    activity_path = USER_FILE
    if not activity_path.exists():
        return

    # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç
    content = activity_path.read_text(encoding="utf-8")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üìã –¢–µ–∫—É—â–∏–π user_activity.json:\n<pre>{content}</pre>",
        parse_mode="HTML"
    )

async def ask_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store = load_store()
    u = store["users"].get(str(update.effective_user.id), {})
    if "current_game" in u:
        cg = u["current_game"]
        # –∑–∞–ø–æ–ª–Ω—è–µ–º context.user_data –∏–∑ cg:
        context.user_data.update({
            "secret": cg["secret"],
            "length": len(cg["secret"]),
            "attempts": cg["attempts"],
            "guesses": cg["guesses"],
        })
        await update.message.reply_text(
            f"–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∏–≥—Ä–∞: {len(cg['secret'])}-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, —Ç—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {cg['attempts']}. –í–≤–æ–¥–∏ –¥–æ–≥–∞–¥–∫—É:"
        )
        return GUESSING
    
    update_user_activity(update.effective_user)
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ? (4‚Äì11)")
    return ASK_LENGTH
	
async def my_letters_during_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /my_letters –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–±—Ä–∞–ª –¥–ª–∏–Ω—É
    await update.message.reply_text("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 11.")
    return ASK_LENGTH
	
async def receive_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    text = update.message.text.strip()
    if not text.isdigit() or not 4 <= int(text) <= 11:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 11.")
        return ASK_LENGTH

    length = int(text)
    candidates = [w for w in WORDLIST if len(w) == length]
    if not candidates:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Å–ª–æ–≤ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:")
        return ASK_LENGTH

    secret = random.choice(candidates)
    
    store = load_store()
    u = store["users"].setdefault(str(update.effective_user.id), {"stats": {"games_played":0,"wins":0,"losses":0}})
    # –ó–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    u["current_game"] = {
        "secret": secret,
        "attempts": 0,
        "guesses": [],
    }
    save_store(store)

    context.user_data["secret"] = secret
    context.user_data["length"] = length
    context.user_data["attempts"] = 0
    context.user_data["guesses"] = []

    await update.message.reply_text(
        f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤. –£ —Ç–µ–±—è 6 –ø–æ–ø—ã—Ç–æ–∫. –í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –¥–æ–≥–∞–¥–∫—É:"
    )
    return GUESSING

async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    store = load_store()
    user_entry = store["users"].setdefault(user_id, {
        "first_name": update.effective_user.first_name,
        "stats": {"games_played": 0, "wins": 0, "losses": 0}
    })

    # –û–±–Ω–æ–≤–ª—è–µ–º last_seen
    user_entry["last_seen_msk"] = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()

    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π‚Äë—Ç–æ –ø—Ä–∏—á–∏–Ω–µ current_game –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—É—é
    if "current_game" not in user_entry:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, –Ω–∞—á–Ω–∏ /play")
        return ConversationHandler.END

    cg = user_entry["current_game"]
    guess = update.message.text.strip().lower()
    secret = cg["secret"]
    length = len(secret)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(guess) != length or guess not in WORDLIST:
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤.")
        return GUESSING

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–≥–∞–¥–∫—É
    cg["guesses"].append(guess)
    cg["attempts"] += 1

    # –§–∏–¥–±–µ–∫
    fb = make_feedback(secret, guess)
    await update.message.reply_text(fb)

    # –ü–æ–±–µ–¥–∞
    if guess == secret:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_entry["stats"]["games_played"] += 1
        user_entry["stats"]["wins"] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        store["global"]["total_games"]   = store["global"].get("total_games", 0) + 1
        store["global"]["total_wins"]    = store["global"].get("total_wins", 0) + 1
        store["global"]["total_losses"]  = store["global"].get("total_losses", 0)
        store["global"]["win_rate"]      = store["global"]["total_wins"] / store["global"]["total_games"]

        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£–≥–∞–¥–∞–ª –∑–∞ {cg['attempts']} {'–ø–æ–ø—ã—Ç–∫–∞' if cg['attempts']==1 else '–ø–æ–ø—ã—Ç–∫–∏' if 2<=cg['attempts']<=4 else '–ø–æ–ø—ã—Ç–æ–∫'}.\n"
            "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤–Ω–æ–≤—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /play."
        )

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        del user_entry["current_game"]
        save_store(store)
        return ConversationHandler.END

    # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
    if cg["attempts"] >= 6:
        user_entry["stats"]["games_played"] += 1
        user_entry["stats"]["losses"] += 1

        store["global"]["total_games"]   = store["global"].get("total_games", 0) + 1
        store["global"]["total_wins"]    = store["global"].get("total_wins", 0)
        store["global"]["total_losses"]  = store["global"].get("total_losses", 0) + 1
        store["global"]["win_rate"]      = (
            store["global"]["total_wins"] / store["global"]["total_games"]
            if store["global"]["total_games"] else 0
        )

        await update.message.reply_text(
            f"üíî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ —Å–ª–æ–≤–æ ¬´{secret}¬ª.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /play."
        )

        del user_entry["current_game"]
        save_store(store)
        return ConversationHandler.END

    # –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–π –¥–æ–≥–∞–¥–∫–∏
    save_store(store)
    return GUESSING


async def my_letters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store = load_store()
    u = store["users"].get(str(update.effective_user.id), {})
    if "current_game" in u:
        cg = u["current_game"]
        # –∑–∞–ø–æ–ª–Ω—è–µ–º context.user_data –∏–∑ cg:
        context.user_data.update({
            "secret": cg["secret"],
            "length": len(cg["secret"]),
            "attempts": cg["attempts"],
            "guesses": cg["guesses"],
        })
        await update.message.reply_text(
            f"–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∏–≥—Ä–∞: {len(cg['secret'])}-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, —Ç—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {cg['attempts']}. –í–≤–æ–¥–∏ –¥–æ–≥–∞–¥–∫—É:"
        )
        return GUESSING
    
    update_user_activity(update.effective_user)
    data = context.user_data
    if "secret" not in data:
        await update.message.reply_text("–°–µ–π—á–∞—Å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ ‚Äî –Ω–∞—á–Ω–∏ –∏–≥—Ä—É: /play")
        return
    guesses = data.get("guesses", [])
    alphabet = list("–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è")

    if not guesses:
        await update.message.reply_text(UNK + " " + " ".join(alphabet))
        return

    status = compute_letter_status(data["secret"], guesses)
    greens  = [ch for ch in alphabet if status.get(ch) == "green"]
    yellows = [ch for ch in alphabet if status.get(ch) == "yellow"]
    reds    = [ch for ch in alphabet if status.get(ch) == "red"]
    unused  = [ch for ch in alphabet if ch not in status]

    lines = []
    if greens:  lines.append(GREEN  + " " + " ".join(greens))
    if yellows: lines.append(YELLOW + " " + " ".join(yellows))
    if reds:    lines.append(RED    + " " + " ".join(reds))
    if unused:  lines.append(UNK    + " " + " ".join(unused))

    await update.message.reply_text("\n".join(lines))

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ñ–¥—É /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
    return ConversationHandler.END

async def reset_global(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_activity(update.effective_user)
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É: /play")

IGN_MSG = "–ö–æ–º–∞–Ω–¥—ã /start –∏ /play –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ /reset."

async def ignore_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return ASK_LENGTH

async def ignore_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(IGN_MSG)
    return GUESSING


def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    app = ApplicationBuilder().token(token).build()
	
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É: –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ —à–ª—ë–º user_activity.json –∞–¥–º–∏–Ω—É
    job_queue = app.job_queue
    job_queue.run_repeating(
        send_activity_periodic,
        interval=3 * 60 * 60,  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        first=10      # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    )
	
    conv = ConversationHandler(
        entry_points=[CommandHandler("play", ask_length)],
        states={
            ASK_LENGTH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_length),
                CommandHandler("start", ignore_ask),
                CommandHandler("play", ignore_ask),
                CommandHandler("reset", reset),
		CommandHandler("my_letters", my_letters_during_length),
            ],
            GUESSING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess),
                CommandHandler("my_letters", my_letters),
                CommandHandler("start", ignore_guess),
                CommandHandler("play", ignore_guess),
                CommandHandler("reset", reset),
            ],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )
    app.add_handler(conv)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ
    app.add_handler(CommandHandler("my_letters", my_letters))
    app.add_handler(CommandHandler("reset", reset_global))
    app.add_handler(CommandHandler("start", start))

    store = load_store()
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª current_game, 
    # –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∏—Ç –µ–≥–æ –≤ context.user_data
    for uid, udata in store["users"].items():
        if "current_game" in udata:
            # –º—ã –∑–∞–ø–æ–º–Ω–∏–º —ç—Ç–æ –≤ user_data –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏:
            pass

    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
